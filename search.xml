<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alibaba与Nacos服务注册与发现</title>
    <url>/2018/12/23/spring-cloud-alibaba/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h3><pre><code>什么是SpringCloud Alibaba？
  简言之，SpringCloud Alibaba是对SpringCloud全生态的一个封装简化，其中还引入了一些阿里自研或其他的开源组件。
  Alibaba让我们更好的使用电商。
</code></pre>
<h3 id="Nacos是什么"><a href="#Nacos是什么" class="headerlink" title="Nacos是什么"></a>Nacos是什么</h3><p>Nacos官网原文：</p>
<blockquote>
<p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p>
</blockquote>
<pre><code>用过springCloud的朋友知道，Nacos对标Erueka。
没用过的朋友可以这样理解，Nacos是一个路由表，我们的各个微服务Web之间相互寻找需要通过这个路由表。
比如业务A有两个节点A1和A2，业务B有个节点B1想要调用A的某个接口。我们不需要在业务B中写一堆A的url来调用api，只要告诉
Nacos我们要找业务A，它就会告诉我们业务A有哪些节点
</code></pre>
<h3 id="如何使用Nacos服务端"><a href="#如何使用Nacos服务端" class="headerlink" title="如何使用Nacos服务端"></a>如何使用Nacos服务端</h3><pre><code>nacos服务端支持很多种部署方式，详情见：https://nacos.io/zh-cn/docs/quick-start.html
笔者比较喜欢docker-compose，使用docker部署步骤如下：
1. 拉取nacos 源码。
    git clone https://github.com/nacos-group/nacos-docker.git
    cd nacos-docker
2. nacos-docker自带的examples/standalone-mysql-5.7.yaml文件默认会启动一个自带的mysql并连接。
    如果要使用自己的mysql，我们就需要修改yaml文件及一个mysql配置文件，并且自己将nacos所需的数据库导入到我们使用的mysql中
    （这一点实在是太不友好了,希望未来会得到改进）。这里不想再开启一个mysql容器的同学可以和笔者一样，选择derby方式启动（需
    要先安装docker及docker-compose）。
    docker-compose -f example/standalone-derby.yaml up -d 
3. 页面访问 --&gt;  http://ip:8848/nacos/
</code></pre>
<p> <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825170242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图 1"></p>
<h3 id="项目端集成Nacos-服务提供方"><a href="#项目端集成Nacos-服务提供方" class="headerlink" title="项目端集成Nacos-服务提供方"></a>项目端集成Nacos-服务提供方</h3><pre><code>1. nacos-provider
pom.xml文件如下：
</code></pre>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;?xml</span> <span class="string">version=&quot;1.0&quot;</span> <span class="string">encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;project</span> <span class="string">xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="string">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         <span class="string">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span> <span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line">    <span class="string">&lt;parent&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;/parent&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.lele&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;mall&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;name&gt;mall&lt;/name&gt;</span></span><br><span class="line">    <span class="string">&lt;description&gt;Demo</span> <span class="string">project</span> <span class="string">for</span> <span class="string">Spring</span> <span class="string">Boot&lt;/description&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;properties&gt;</span></span><br><span class="line">        <span class="string">&lt;java.version&gt;1.8&lt;/java.version&gt;</span></span><br><span class="line">    <span class="string">&lt;/properties&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;!--</span> <span class="string">spring</span> <span class="string">cloud</span> <span class="string">alibaba，必须有，版本自选</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="string">&lt;dependencyManagement&gt;</span></span><br><span class="line">        <span class="string">&lt;dependencies&gt;</span></span><br><span class="line">            <span class="string">&lt;dependency&gt;</span></span><br><span class="line">                <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line">                <span class="string">&lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="string">&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span></span><br><span class="line">                <span class="string">&lt;type&gt;pom&lt;/type&gt;</span></span><br><span class="line">                <span class="string">&lt;scope&gt;import&lt;/scope&gt;</span></span><br><span class="line">            <span class="string">&lt;/dependency&gt;</span></span><br><span class="line">        <span class="string">&lt;/dependencies&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependencyManagement&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;dependencies&gt;</span></span><br><span class="line">        <span class="string">&lt;dependency&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&lt;dependency&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/dependency&gt;</span></span><br><span class="line">        <span class="string">&lt;!--</span> <span class="string">alibaba</span> <span class="string">必须有，版本自选--&gt;</span></span><br><span class="line">        <span class="string">&lt;dependency&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&lt;!--</span> <span class="string">junit</span> <span class="string">--&gt;</span></span><br><span class="line">        <span class="string">&lt;dependency&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="string">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line">            <span class="string">&lt;exclusions&gt;</span></span><br><span class="line">                <span class="string">&lt;exclusion&gt;</span></span><br><span class="line">                    <span class="string">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span></span><br><span class="line">                    <span class="string">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="string">&lt;/exclusion&gt;</span></span><br><span class="line">            <span class="string">&lt;/exclusions&gt;</span></span><br><span class="line">        <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;/dependencies&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;build&gt;</span></span><br><span class="line">        <span class="string">&lt;plugins&gt;</span></span><br><span class="line">            <span class="string">&lt;plugin&gt;</span></span><br><span class="line">                <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">                <span class="string">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="string">&lt;/plugin&gt;</span></span><br><span class="line">        <span class="string">&lt;/plugins&gt;</span></span><br><span class="line">    <span class="string">&lt;/build&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure>
<pre><code>2. application.properties文件如下：
</code></pre>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server.port=8081</span></span><br><span class="line"><span class="string">spring.application.name=order</span></span><br><span class="line"><span class="string">spring.cloud.nacos.discovery.server-addr=之前的nacos服务端ip:8848</span></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include=*</span></span><br></pre></td></tr></table></figure>
<pre><code>3. application如下：
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//必须有， </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MallApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MallApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>4、正常启动后，我们会看到服务列表多出了我们的application。
</code></pre>
<p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825170425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图 2"></p>
<h3 id="项目端继承Nacos-消费者方"><a href="#项目端继承Nacos-消费者方" class="headerlink" title="项目端继承Nacos-消费者方"></a>项目端继承Nacos-消费者方</h3><pre><code>在上面我们启用了order模块，order模块提供了一些对外的api接口供其他服务调用，我们可以创建一个user项目来调用这个api
（通过Nacos	来调用）。
1. 首先，我们现在order模块补上一个服务方法。
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">        <span class="meta">@GetMapping(value = &quot;/hello/&#123;string&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@PathVariable</span> String string)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello! 我是Order，感谢你(&quot;</span> + string+<span class="string">&quot;)来调用我的hello方法&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<pre><code>2. 然后，新建一个product，pom与application.properties与上面一样不再赘述，这个项目我们给起名user。
</code></pre>
<p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825171521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图 3"></p>
<pre><code>3. 最后，我们在product中加入访问order模块API接口的方法。
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ProductApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosController</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancerClient.choose(<span class="string">&quot;order&quot;</span>); <span class="comment">// 负载均衡获取我们实际要访问的项目地址</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> String.format(<span class="string">&quot;http://%s:%s/hello/%s&quot;</span>,serviceInstance.getServiceId(),serviceInstance.getPort(),appName);</span><br><span class="line">            System.out.println(<span class="string">&quot;request path:&quot;</span> +path);</span><br><span class="line">            <span class="keyword">return</span> restTemplate.getForObject(path,String.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>4. 访问product的接口，可以看到成功返回了orderAPI的信息,服务路由成功。
</code></pre>
<p>   <a href="http://localhost:8082/hi">http://localhost:8082/hi</a><br>   <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825174126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图 4"></p>
]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
        <category>Alibaba与Nacos服务注册与发现</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>实用的vue插件大汇总</title>
    <url>/2018/03/28/vue-clie/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件特别整理了常用的vue插件，来了个大汇总，方便查找使用，便于工作和学习。很全的vue插件汇总，赶紧收藏下吧！</p>
<h2 id="一、UI组件及框架"><a href="#一、UI组件及框架" class="headerlink" title="一、UI组件及框架"></a>一、UI组件及框架</h2><p>element - 饿了么出品的Vue2的web UI工具套件</p>
<p>mint-ui - Vue2的移动UI元素</p>
<p>iview - 基于 Vuejs 的开源 UI 组件库</p>
<p>vux-ui -Vue.js 移动端 UI 组件库</p>
<p>Keen-UI - 轻量级的基本UI组件合集</p>
<p>vue-material - 通过Vue Material和Vue 2建立精美的app应用</p>
<p>muse-ui - 三端样式一致的响应式 UI 库</p>
<p>vuetify - 为移动而生的Vue JS 2组件框架</p>
<p>vonic - 快速构建移动端单页应用</p>
<p>vue-blu - 帮助你轻松创建web应用</p>
<p>vue-multiselect - Vue.js选择框解决方案</p>
<p>VueCircleMenu - 漂亮的vue圆环菜单</p>
<p>vue-chat - vuejs和vuex及webpack的聊天示例</p>
<p>radon-ui - 快速开发产品的Vue组件库</p>
<p>vue-waterfall - Vue.js的瀑布布局组件</p>
<p>vue-carbon - 基于 vue 开发MD风格的移动端</p>
<p>vue-beauty - 由vue和ant design创建的优美UI组件</p>
<p>bootstrap-vue - 应用于Vuejs2的Twitter的Bootstrap 4组件</p>
<p>vueAdmin - 基于vuejs2和element的简单的管理员模板</p>
<p>vue-ztree - 用 vue 写的树层级组件vue-tree - vue树视图组件</p>
<p>vue-tabs - 多tab页轻型框架</p>
<h2 id="二、滚动scroll组件"><a href="#二、滚动scroll组件" class="headerlink" title="二、滚动scroll组件"></a>二、滚动scroll组件</h2><p>vue-scroller - Vonic UI的功能性组件</p>
<p>vue-mugen-scroll - 无限滚动组件</p>
<p>vue-infinite-loading - VueJS的无限滚动插件</p>
<p>vue-virtual-scroller - 带任意数目数据的顺畅的滚动</p>
<p>vue-infinite-scroll - VueJS的无限滚动指令</p>
<p>vue-scrollbar - 最简单的滚动区域组件</p>
<p>vue-scroll - vue滚动vue-pull-to-refresh - Vue2的上拉下拉</p>
<p>mint-loadmore - VueJS的双向下拉刷新组件</p>
<p>vue-smoothscroll - smoothscroll的VueJS版本</p>
<h2 id="三、slider组件"><a href="#三、slider组件" class="headerlink" title="三、slider组件"></a>三、slider组件</h2><p>vue-awesome-swiper - vue.js触摸滑动组件，js插件swiper的vue版本</p>
<p>vue-slick - 实现流畅轮播框的vue组件</p>
<p>vue-swipe - VueJS触摸滑块</p>
<p>vue-swiper - 易于使用的滑块组件</p>
<p>vue-images - 显示一组图片的lightbox组件</p>
<p>vue-carousel-3d - VueJS的3D轮播组件</p>
<p>vue-slide - vue轻量级滑动组件</p>
<p>vue-slider - vue 滑动组件</p>
<p>vue-m-carousel - vue 移动端轮播组件</p>
<p>dd-vue-component - 订单来了的公共组件库</p>
<p>vue-easy-slider - Vue 2.x的滑块组件</p>
<h2 id="四、编辑器"><a href="#四、编辑器" class="headerlink" title="四、编辑器"></a>四、编辑器</h2><p>markcook - 好看的markdown编辑器</p>
<p>eme - 优雅的Markdown编辑器</p>
<p>vue-syntax-highlight - Sublime Text语法高亮</p>
<p>vue-quill-editor - 基于Quill适用于Vue2的富文本编辑器</p>
<p>Vueditor - 所见即所得的编辑器</p>
<p>vue-html5-editor - html5所见即所得编辑器</p>
<p>vue2-editor - HTML编辑器</p>
<p>vue-simplemde - VueJS的Markdown编辑器组件</p>
<p>vue-quill - vue组件构建quill编辑器</p>
<h2 id="五、图表"><a href="#五、图表" class="headerlink" title="五、图表"></a>五、图表</h2><p>vue-table - 简化数据表格</p>
<p>vue-chartjs - vue中的Chartjs的封装</p>
<p>vue-charts - 轻松渲染一个图表</p>
<p>vue-chart - 强大的高速的vue图表解析</p>
<p>vue-highcharts - HighCharts组件</p>
<p>chartjs - Vue Bulma的chartjs组件</p>
<p>vue-chartkick - VueJS一行代码实现优美图表</p>
<h2 id="六、日历"><a href="#六、日历" class="headerlink" title="六、日历"></a>六、日历</h2><p>vue-calendar - 日期选择插件</p>
<p>vue-datepicker - 日历和日期选择组件</p>
<p>vue-datetime-picker - 日期时间选择控件</p>
<p>vue2-calendar - 支持lunar和日期事件的日期选择器</p>
<p>vue-fullcalendar - 基于vue.js的全日历组件</p>
<p>vue-datepicker - 漂亮的Vue日期选择器组件</p>
<p>datepicker - 基于flatpickr的时间选择组件</p>
<p>vue2-timepicker - 下拉时间选择器</p>
<p>vue-date-picker - VueJS日期选择器组件</p>
<p>vue-datepicker-simple - 基于vue的日期选择器</p>
<h2 id="七、地址选择"><a href="#七、地址选择" class="headerlink" title="七、地址选择"></a>七、地址选择</h2><p>vue-city - 城市选择器</p>
<p>vue-region-picker - 选择中国的省份市和地区</p>
<h2 id="八、地图"><a href="#八、地图" class="headerlink" title="八、地图"></a>八、地图</h2><p>vue-amap - 基于Vue 2和高德地图的地图组件</p>
<p>vue-google-maps - 带有双向数据绑定Google地图组件</p>
<p>vue-baidu-map- 基于 Vue 2的百度地图组件库</p>
<p>vue-cmap - Vue China map可视化组件</p>
<h2 id="九、播放器"><a href="#九、播放器" class="headerlink" title="九、播放器"></a>九、播放器</h2><p>vue-video-player - VueJS视频及直播播放器</p>
<p>vue-video - Vue.js的HTML5视频播放器</p>
<p>vue-music-master - vue手机端网页音乐播放器</p>
<h2 id="十、文件上传"><a href="#十、文件上传" class="headerlink" title="十、文件上传"></a>十、文件上传</h2><p>vue-upload-component - Vuejs文件上传组件</p>
<p>vue-core-image-upload - 轻量级的vue上传插件</p>
<p>vue-dropzone - 用于文件上传的Vue组件</p>
<h2 id="十一、图片处理"><a href="#十一、图片处理" class="headerlink" title="十一、图片处理"></a>十一、图片处理</h2><p>vue-lazyload-img - 移动优化的vue图片懒加载插件</p>
<p>vue-image-crop-upload - vue图片剪裁上传组件</p>
<p>vue-svgicon - 创建svg图标组件的工具</p>
<p>vue-img-loader - 图片加载UI组件</p>
<p>vue-image-clip- 基于vue的图像剪辑组件</p>
<p>vue-progressive-image - Vue的渐进图像加载插件</p>
<h2 id="十二、提示"><a href="#十二、提示" class="headerlink" title="十二、提示"></a>十二、提示</h2><p>vue-toast-mobile - VueJS的toast插件</p>
<p>vue-msgbox - vuejs的消息框</p>
<p>vue-tooltip - 带绑定信息提示的提示工具</p>
<p>vue-verify-pop - 带气泡提示的vue校验插件</p>
<h2 id="十三、进度条"><a href="#十三、进度条" class="headerlink" title="十三、进度条"></a>十三、进度条</h2><p>vue-radial-progress - Vue.js放射性进度条组件</p>
<p>vue-progressbar - vue轻量级进度条</p>
<p>vue2-loading-bar - 最简单的仿Youtube加载条视图</p>
<h2 id="十四、分页"><a href="#十四、分页" class="headerlink" title="十四、分页"></a>十四、分页</h2><p>vuejs-paginate   一个简单的分页的组件</p>
<p>vue-paginate   一个复杂的分页的组件</p>
<h2 id="十五、开发框架汇总"><a href="#十五、开发框架汇总" class="headerlink" title="十五、开发框架汇总"></a>十五、开发框架汇总</h2><p>vue-admin - Vue管理面板框架</p>
<p>electron-vue - Electron及VueJS快速启动样板</p>
<p>vue-2.0-boilerplate - Vue2单页应用样板</p>
<p>vue-webgulp - 仿VueJS Vue loader示例</p>
<p>vue-bulma - 轻量级高性能MVVM Admin UI框架</p>
<p>vue-spa-template - 前后端分离后的单页应用开发</p>
<p>Framework7-Vue - VueJS与Framework7结合</p>
<p>vue-element-starter - vue启动页</p>
<h2 id="十六、实用库汇总"><a href="#十六、实用库汇总" class="headerlink" title="十六、实用库汇总"></a>十六、实用库汇总</h2><p>vuelidate - 简单轻量级的基于模块的Vue.js验证</p>
<p>qingcheng - qingcheng主题</p>
<p>vuex - 专为 Vue.js 应用程序开发的状态管理模式</p>
<p>vue-axios - 将axios整合到VueJS的封装</p>
<p>vue-desktop - 创建管理面板网站的UI库</p>
<p>vue-meta - 管理app的meta信息</p>
<p>avoriaz - VueJS测试实用工具库</p>
<p>vue-framework7 - 结合VueJS使用的Framework7组件</p>
<p>vue-lazy-render - 用于Vue组件的延迟渲染</p>
<p>vue-svg-icon - vue2的可变彩色svg图标方案</p>
<p>vue-online - reactive的在线和离线组件</p>
<p>vue-password-strength-meter - 交互式密码强度计</p>
<p>vuep - 用实时编辑和预览来渲染Vue组件</p>
<p>vue-bootstrap-modal - vue的Bootstrap样式组件</p>
<p>element-admin - 支持 vuecli 的 Element UI 的后台模板</p>
<p>vue-shortkey - 应用于Vue.js的Vue-ShortKey 插件</p>
<p>cleave - 基于cleave.js的Cleave组件</p>
<p>vue-events - 简化事件的VueJS插件</p>
<p>http-vue-loader - 从html及js环境加载vue文件</p>
<p>vue-electron - 将选择的API封装到Vue对象中的插件</p>
<p>vue-router-transition - 页面过渡插件vuemit - 处理VueJS事件</p>
<p>vue-cordova - Cordova的VueJS插件</p>
<p>vue-qart - 用于qartjs的Vue2指令</p>
<p>vue-websocket - VueJS的Websocket插件</p>
<p>vue-gesture - VueJS的手势事件插件</p>
<p>vue-local-storage - 具有类型支持的Vuejs本地储存插件</p>
<p>lazy-vue - 懒加载图片</p>
<p>vue-lazyloadImg - 图片懒加载插件</p>
<p>vue-bus - VueJS的事件总线</p>
<p>vue-observe-visibility - 当元素在页面上可见或隐藏时检测</p>
<p>vue-notifications - 非阻塞通知库</p>
<p>v-media-query - vue中添加用于配合媒体查询的方法</p>
<p>vuex-shared-mutations - 分享某种Vuex mutations</p>
<p>vue-lazy-component - 懒加载组件或者元素的Vue指令</p>
<p>vue-reactive-storage - vue插件的Reactive层</p>
<p>vue-ts-loader - 在Vue装载机检查脚本</p>
<p>vue-pagination-2 - 简单通用的分页组件</p>
<p>vuex-i18n - 定位插件Vue.resize - 检测HTML调整大小事件的vue指令</p>
<p>vue-zoombox - 一个高级zoombox</p>
<p>leo-vue-validator - 异步的表单验证组件</p>
<p>modal - Vue Bulma的modal组件Famous-Vue - Famous库的vue组件</p>
<p>vue-input-autosize - 基于内容自动调整文本输入的大小</p>
<p>vue-file-base64 - 将文件转换为Base64的vue组件</p>
<p>Vue-Easy-Validator - 简单的表单验证</p>
<p>vue-truncate-filter - 截断字符串的VueJS过滤器</p>
<ul>
<li>服务端</li>
<li>vue-ssr - 结合Express使用Vue2服务端渲染</li>
<li>nuxt.js - 用于服务器渲染Vue app的最小化框架</li>
<li>vue-ssr - 非常简单的VueJS服务器端渲染模板</li>
<li>vue-easy-renderer -Nodejs服务端渲染</li>
<li>express-vue -简单的使用服务器端渲染vue.js</li>
</ul>
<h2 id="十七、辅助工具"><a href="#十七、辅助工具" class="headerlink" title="十七、辅助工具"></a>十七、辅助工具</h2><p>DejaVue - Vuejs可视化及压力测试</p>
<p>vue-generate-component - 轻松生成Vue js组件的CLI工具</p>
<p>vscode-VueHelper - 目前vscode最好的vue代码提示插件</p>
<p>vue-play - 展示Vue组件的最小化框架</p>
<p>VuejsStarterKit - vuejs starter套件</p>
<p>vue-multipage-cli - 简单的多页CLI</p>
<h2 id="十八、应用实例"><a href="#十八、应用实例" class="headerlink" title="十八、应用实例"></a>十八、应用实例</h2><p>pagekit - 轻量级的CMS建站系统</p>
<p>vuedo - 博客平台</p>
<p>koel - 基于网络的个人音频流媒体服务</p>
<p>CMS-of-Blog - 博客内容管理器</p>
<p>vue-cnode - 重写vue版cnode社区</p>
<p>vue-ghpages-blog - 依赖GitHub Pages无需本地生成的静态博客</p>
<p>swoole-vue-webim - Web版的聊天应用</p>
<p>fewords - 功能极其简单的笔记本</p>
<p>jackblog-vue - 个人博客系统</p>
<p>vue-blog - 使用Vue2.0 和Vuex的vue-blog</p>
<p>vue-dashing-js - nuvo-dashing-js的fork</p>
<p>rss-reader - 简单的rss阅读器</p>
<h2 id="十九、Demo示例"><a href="#十九、Demo示例" class="headerlink" title="十九、Demo示例"></a>十九、Demo示例</h2><ul>
<li><p><a href="https://github.com/shinygang/Vue-cnodejs">Vue-cnodejs</a> - 基于vue重写 <a href="http://cnodejs.org/">Cnodejs.org</a>的webapp</p>
</li>
<li><p><a href="https://github.com/javaSwing/NeteaseCloudWebApp">NeteaseCloudWebApp</a> - 高仿网易云音乐的webapp</p>
</li>
<li><p><a href="https://github.com/hilongjw/vue-zhihu-daily">vue-zhihu-daily</a> - 知乎日报 with Vuejs</p>
</li>
<li><p><a href="https://github.com/useryangtao/vue-wechat">vue-wechat</a> - vue.js开发微信app界面</p>
</li>
<li><p><a href="https://github.com/lzxb/vue2-demo">vue2-demo</a> - 从零构建vue2 + vue-router + vuex 开发环境</p>
</li>
<li><p><a href="https://github.com/liangxiaojuan/eleme">eleme</a> - 高仿饿了么app商家详情</p>
</li>
<li><p><a href="https://github.com/kenberkeley/vue-demo">vue-demo</a> - vue简易留言板</p>
</li>
<li><p><a href="https://github.com/zhengguorong/maizuo">maizuo</a> - vue&#x2F;vuex&#x2F;redux仿卖座网</p>
</li>
<li><p><a href="https://github.com/codecasts/spa-starter-kit">spa-starter-kit</a> - 单页应用启动套件</p>
</li>
<li><p><a href="https://github.com/Sioxas/vue-music">vue-music</a> - Vue 音乐搜索播放</p>
</li>
<li><p><a href="https://github.com/jiakeqi/douban">douban</a> - 模仿豆瓣前端</p>
</li>
<li><p><a href="https://github.com/liangxiaojuan/vue-Meizi">vue-Meizi</a> - vue最新实战项目</p>
</li>
<li><p><a href="https://github.com/yatessss/zhihudaily-vue">zhihudaily-vue</a> - 知乎日报web版</p>
</li>
<li><p><a href="https://github.com/lavyun/vue-demo-kugou">vue-demo-kugou</a> - vuejs仿写酷狗音乐webapp</p>
</li>
<li><p><a href="https://github.com/SimonZhangITer/VueDemo_Sell_Eleme">VueDemo_Sell_Eleme</a> - Vue2高仿饿了么外卖平台</p>
</li>
<li><p><a href="https://github.com/canfoo/vue2.0-taopiaopiao">vue2.0-taopiaopiao</a> - vue2.0与express构建淘票票页面</p>
</li>
<li><p><a href="https://github.com/jiangjiu/vue-leancloud-blog">vue-leancloud-blog</a> - 一个前后端完全分离的单页应用</p>
</li>
<li><p><a href="https://github.com/yjj5855/node-vue-server-webpack">node-vue-server-webpack</a> - Node.js+Vue.js+webpack快速开发框架</p>
</li>
<li><p><a href="https://github.com/wendaosanshou/mi-by-vue">mi-by-vue</a> - VueJS仿小米官网</p>
</li>
<li><p><a href="https://github.com/okoala/vue-fis3">vue-fis3</a> - 流行开源工具集成demo</p>
</li>
<li><p><a href="https://github.com/superman66/vue2.x-douban">vue2.x-douban</a> - Vue2实现简易豆瓣电影webApp</p>
</li>
<li><p><a href="https://github.com/ChuckCZC/vue-demo-maizuo">vue-demo-maizuo</a> - 使用Vue2全家桶仿制卖座电影</p>
</li>
<li><p><a href="https://github.com/iHaPBoy/vue-zhihudaily">vue-zhihudaily</a> - 知乎日报 Web 版本</p>
</li>
<li><p><a href="https://github.com/liujians/vue-adminLte-vue-router">vue-adminLte-vue-router</a> - vue和adminLte整合应用</p>
</li>
<li><p><a href="https://github.com/superman66/vue-axios-github">vue-axios-github</a> - 登录拦截登出功能</p>
</li>
<li><p><a href="https://github.com/pomelo-chuan/Zhihu-Daily-Vue.js">Zhihu-Daily-Vue.js</a> - Vuejs单页网页应用</p>
</li>
<li><p><a href="https://github.com/rokups/hello-vue-django">hello-vue-django</a> - 使用带有Django的vuejs的样板项目</p>
</li>
<li><p><a href="https://github.com/wszgxa/vue-cnode">vue-cnode</a> - vue单页应用demo</p>
</li>
<li><p><a href="https://github.com/CommanderXL/x-blog">x-blog</a> - 开源的个人blog项目</p>
</li>
<li><p><a href="https://github.com/xrr2016/vue-express-mongodb">vue-express-mongodb</a> - 简单的前后端分离案例</p>
</li>
<li><p><a href="https://github.com/secreter/websocket_chat">websocket_chat</a> - 基于vue和websocket的多人在线聊天室</p>
</li>
<li><p><a href="https://github.com/beidan/photoShare">photoShare</a> - 基于图片分享的社交平台</p>
</li>
<li><p><a href="https://github.com/cs1707/vue-zhihudaily-2.0">vue-zhihudaily-2.0</a> - 使用Vue2.0+vue-router+vuex创建的zhihudaily</p>
</li>
<li><p><a href="https://github.com/lin-xin/notepad">notepad</a> - 本地存储的记事本</p>
</li>
<li><p><a href="https://github.com/elva2596/vueBlog">vueBlog</a> - 前后端分离博客</p>
</li>
<li><p><a href="https://github.com/hql123/vue-ruby-china">vue-ruby-china</a> - VueJS框架搭建的rubychina平台</p>
</li>
<li><p><a href="https://github.com/littlewin-wang/Zhihu_Daily">Zhihu_Daily</a> - 基于Vue和Nodejs的Web单页应用</p>
</li>
<li><p><a href="https://github.com/Molunerfinn/vue-koa-demo">vue-koa-demo</a> - 使用Vue2和Koa1的全栈demo</p>
</li>
<li><p><a href="https://github.com/vincentSea/vue2.x-Cnode">vue2.x-Cnode</a> - 基于vue全家桶的Cnode社区</p>
</li>
<li><p><a href="https://github.com/shaqihe/life-app-vue">life-app-vue</a> - 使用vue2完成多功能集合到小webapp</p>
</li>
<li><p><a href="https://github.com/SidKwok/github-explorer">github-explorer</a> - 寻找最有趣的GitHub库</p>
</li>
<li><p><a href="https://github.com/wenye123/vue-trip">vue-trip</a> - vue2做的出行webapp</p>
</li>
<li><p><a href="https://github.com/albertchan/vue-ssr-boilerplate">vue-ssr-boilerplate</a> - 精简版的ofvue-hackernews-2</p>
</li>
<li><p><a href="https://github.com/nswbmw/vue-bushishiren">vue-bushishiren</a> - 不是诗人应用</p>
</li>
<li><p><a href="https://github.com/peng1992/houtai">houtai</a> - 基于vue和Element的后台管理系统</p>
</li>
<li><p><a href="https://github.com/QRL909109/ios7-vue">ios7-vue</a> - 使用vue2.0 vue-router vuex模拟ios7</p>
</li>
<li><p><a href="https://github.com/tyllo/Framework7-VueJS">Framework7-VueJS</a> - 使用移动框架的示例</p>
</li>
<li><p><a href="https://github.com/BubblyPoker/cnode-vue">cnode-vue</a> - 基于vue和vue-router构建的cnodejs web网站SPA</p>
</li>
<li><p><a href="https://github.com/zhoou/vue-cli-multipage-bootstrap">vue-cli-multipage-bootstrap</a> - 将vue官方在线示例整合到组件中</p>
</li>
<li><p><a href="https://github.com/jiananle/vue-cnode">vue-cnode</a> - 用 Vue 做的 CNode 官网</p>
</li>
<li><p><a href="https://github.com/GitaiQAQ/HyaReader">HyaReader</a> - 移动友好的阅读器</p>
</li>
<li><p><a href="https://github.com/xrr2016/zhihu-daily">zhihu-daily</a> - 轻松查看知乎日报内容</p>
</li>
<li><p><a href="https://github.com/Alex-xd/seeMusic">seeMusic</a> - 跨平台云音乐播放器</p>
</li>
<li><p><a href="https://github.com/Damonlw/vue-cnode">vue-cnode</a> - 使用cNode社区提供的接口</p>
</li>
<li><p><a href="https://github.com/moonou/zhihu-daily-vue">zhihu-daily-vue</a> - 知乎日报</p>
</li>
<li><p><a href="https://github.com/sailengsi/sls-vuex2-demo">sls-vuex2-demo</a> - vuex2商城购物车demo</p>
</li>
<li><p><a href="https://github.com/ITCNZ/vue-dropload">vue-dropload</a> - 用以测试下拉加载与简单路由</p>
</li>
<li><p><a href="https://github.com/soulcm/vue-cnode-mobile">vue-cnode-mobile</a> - 搭建cnode社区</p>
</li>
<li><p><a href="https://github.com/fishenal/Vuejs-SalePlatform">Vuejs-SalePlatform</a> - vuejs搭建的售卖平台demo</p>
</li>
<li><p><a href="https://github.com/Halfeld/v-notes">v-notes</a> - 简单美观的记事本</p>
</li>
<li><p><a href="https://github.com/BosNaufal/vue-starter">vue-starter</a> - VueJs项目的简单启动页</p>
</li>
<li><p><a href="https://github.com/youknowznm/vue-memo">vue-memo</a> - 用 vue写的记事本应用</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>实用的Vue插件大汇总</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目脚手架</title>
    <url>/2018/03/27/vue-doc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：*<a href="https://github.com/vuejs/vue-cli">https://github.com/vuejs/vue-cli</a></p>
<h2 id="一、安装-node-js"><a href="#一、安装-node-js" class="headerlink" title="一、安装 node.js"></a>一、安装 node.js</h2><p>首先需要安装node环境，可以直接到中文官网*   <a href="http://nodejs.cn/" title="Node.js中文官网">http://nodejs.cn/</a><br>下载安装包。</p>
<p>只是这样安装的 node 是固定版本的，如果需要多版本的 node，可以使用 nvm 安装*   <a href="http://blog.csdn.net/s8460049/article/details/52396399" title="Node.js 安装">http://blog.csdn.net/s8460049/article/details/52396399</a></p>
<p>安装完成后，可以命令行工具中输入 <code>node -v</code> 和 <code>npm -v</code>，如果能显示出版本号，就说明安装成功。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://itcnw3c.github.io/ITCN/pages/Vue_files/36zfjm6o.bmp" alt="图 1"></p>
<h2 id="二、安装-vue-cli"><a href="#二、安装-vue-cli" class="headerlink" title="二、安装 vue-cli"></a>二、安装 vue-cli</h2><p>安装好了 node，我们可以直接全局安装 vue-cli：</p>
<p><code>npm install -g vue- cli</code></p>
<p>但是这种安装方式比较慢，推荐使用国内镜像来安装，所以我们先设置 cnpm：</p>
<p><code>npm install -g</code> cnpm –registry&#x3D; <a href="http://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<p>如果安装失败，可以使用 <code>npm cache clean</code> 清理缓存，然后再重新安装。后面的安装过程中，如有安装失败的情况，也需要先清理缓存</p>
<p>同样可以使用 <code>cnpm -v</code> 查看是否安装成功<br><img src= "/img/loading.gif" data-lazy-src="https://itcnw3c.github.io/ITCN/pages/Vue_files/1yxhj2c7.bmp" alt="图 2"></p>
<p>然后使用 cnpm 安装 vue-cli 和 webpack</p>
<p><code>cnpm install -g vue- cli</code></p>
<p>最新的 vue 项目模板中，都带有 webpack 插件，所以这里可以不安装 webpack</p>
<p>安装完成后，可以使用 vue -V （注意 V 大写）查看是否安装成功。<br><img src= "/img/loading.gif" data-lazy-src="https://itcnw3c.github.io/ITCN/pages/Vue_files/5ua45x76.bmp" alt="图 3"></p>
<p>如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，可以使用 <code>npm install -g npm</code> 来更新版本</p>
<h2 id="三、生成项目"><a href="#三、生成项目" class="headerlink" title="三、生成项目"></a>三、生成项目</h2><p>首先需要在命令行中进入到项目目录，然后输入：</p>
<p><code>vue init webpack Vue-Project</code></p>
<p>其中 webpack 是模板名称，可以到 vue.js 的 GitHub 上查看更多的模板*   <a href="https://github.com/vuejs-templates" title="Vue 模板">https://github.com/vuejs-templates</a></p>
<p>Vue-Project 是自定义的项目名称，命令执行之后，会在当前目录生成一个以该名称命名的项目文件夹</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://itcnw3c.github.io/ITCN/pages/Vue_files/qbttvixj.bmp" alt="图 4"></p>
<p>配置完成后，可以看到目录下多出了一个项目文件夹，里面就是 vue-cli 创建的一个基于 webpack 的 vue.js 项目</p>
<p>然后进入项目目录（cd Vue-Project），使用 cnpm 安装依赖</p>
<p><code>cnpm install</code></p>
<p>然后启动项目</p>
<p><code>npm run dev</code></p>
<p>如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，需要修改一下配置文件 config&gt;index.js</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://itcnw3c.github.io/ITCN/pages/Vue_files/4xdvkl02.bmp" alt="图 5"></p>
<p>建议将端口号改为不常用的端口。另外我还将 build 的路径前缀修改为 ‘ .&#x2F; ‘（原本为 ‘ &#x2F; ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ &#x2F; ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。</p>
<h2 id="四、打包上线"><a href="#四、打包上线" class="headerlink" title="四、打包上线"></a>四、打包上线</h2><p>自己的项目文件都需要放到 src 文件夹下</p>
<p>项目开发完成之后，可以输入 <code>npm run build</code> 来进行打包工作</p>
<p><code>npm run build</code></p>
<p>打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看</p>
<p>项目上线时，只需要将 dist 文件夹放到服务器就行了。</p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue脚手架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/03/22/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel流量防卫兵介绍、流量控制</title>
    <url>/2018/12/24/spring-cloud-alibaba-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、Sentinel是什么？"><a href="#一、Sentinel是什么？" class="headerlink" title="一、Sentinel是什么？"></a>一、Sentinel是什么？</h2><p>  Sentinel是<strong>分布式系统的流量防卫兵</strong>！  </p>
<p>  什么意思呢？ 在分布式系统中，各个节点之间往往会存在调用关系。比如电商系统中，<strong>订单节点A</strong>需要调用<strong>库存节点B</strong>的减库存接口，但是在<strong>库存节点B</strong>挂掉了，或者<strong>库存节点B</strong>负载极高，短时间内无法response，就可能导致订单节点也跟着异常或停滞。</p>
<p>   为了防止这种，节点B挂掉（或停滞）导致节点A挂掉（或停滞），又进一步导致其他节点一同发生连锁反应，<strong>Hystrix闪亮登场</strong>。</p>
<p>  嗯……说好的Sentinel，Hystrix是个什么鬼？</p>
<p>   在SpringCloud的家族里面，Netflix公司开源的Hystrix才是老牌选手，具有“熔断、服务降级、近实时服务监控”的能力。Sentinel则是随着新生代（SpringCloud Alibaba）一同登场的“QPS可控、支撑近十年阿里巴巴双11”的强劲新人（<a href="https://www.cnblogs.com/zhyg/p/11474406.html">对两者区别有兴趣可以看看这里</a>）。</p>
<p>   为了更好的理解Sentinel，我们先来看一下Sentinel最基本的功能——限流。</p>
<h2 id="二、Sentinel-Dashboard"><a href="#二、Sentinel-Dashboard" class="headerlink" title="二、Sentinel Dashboard"></a>二、Sentinel Dashboard</h2><p>  Sentinel可视化控制台，我们可以在上面看到已连接服务的一些监控信息。</p>
<ol>
<li>下载Sentinel dashboard包。</li>
</ol>
<pre><code>[https://github.com/alibaba/Sentinel/releases](https://github.com/alibaba/Sentinel/releases) 可见所有版本的jar包。
</code></pre>
<ol start="2">
<li>启动dashboard。</li>
</ol>
<pre><code>java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.7.1.jar
![图1](https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826095816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70)
</code></pre>
<ol start="3">
<li>访问localhost:8080，用户名密码全部默认sentinel。<br> <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826101344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图2"><ol start="4">
<li>进入dashboard，可以看到这里有某个服务的QPS数据（图中是Sentinel Dashboard自身的服务接口），左侧菜单栏里面可以配置流量控制规则、服务降级规则、热点数据规则。<br> <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826101513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图3"></li>
</ol>
</li>
</ol>
<h2 id="三、Sentinel-接入端"><a href="#三、Sentinel-接入端" class="headerlink" title="三、Sentinel 接入端"></a>三、Sentinel 接入端</h2><p>  dashboard是一个便捷的页面管理工具，真正的Sentinel功能还是依赖在业务项目之中，我们继续在之前的Demo基础上进行扩充。</p>
<ol>
<li>添加依赖。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>添加配置。（<a href="/2018/12/24/spring-cloud-alibaba-1/">上一章</a>我们介绍了可以在Nacos配置中心添加yml或properties配置，但是这里为了代码完整保存，仍然写在了bootstrap.properties中）。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring.cloud.sentinel.transport.port=8121</span><br><span class="line">spring.cloud.sentinel.transport.dashboard=localhost:8080</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加接口并配置Sentinel资源名称：test。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动application，页面访问测试接口（<em>注意：必须先访问过该接口，才能在dashboard上看到该接口的信息</em>）。</li>
</ol>
<pre><code>![图4](https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826101803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70)
</code></pre>
<ol start="5">
<li>查看dashboard，可以看到order项目已经被sentinel dashboard监控到了。我们可以直接在页面上配置流量限制（<em>注意：页面配置不是持久化的，之后章节我们会介绍sentinel规则持久化的方法</em>）。</li>
</ol>
<pre><code>![图5](https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826101850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70)
</code></pre>
<ol start="6">
<li>测试 流量限制，设置test接口的QPS 单机阈值为1.</li>
</ol>
<pre><code>![图6](https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826101957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70)
</code></pre>
<ol start="7">
<li>测试 流量限制，连续访问test接口两次，发现第二次接口不可达，测试成功。</li>
</ol>
<pre><code>![图7](https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826102041.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70)
![图8](https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826102122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70)
</code></pre>
<h2 id="四、热点规则-x2F-服务降级规则"><a href="#四、热点规则-x2F-服务降级规则" class="headerlink" title="四、热点规则&#x2F;服务降级规则"></a>四、热点规则&#x2F;服务降级规则</h2><p>  除了流量控制，sentinel还支持热点流量控制、服务降级规则配置等</p>
<h3 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h3><p>   热点规则是对接口规则的更细化的控制，可以通过对参数进行流量控制，比如将test方法改造为带参数的方法（如下代码），然后配置热点规则的参数索引、单机阈值、统计窗口长度（如下图），则可以按照参数限制。<br>   <em>限制规则：按照索引下标选择限制的参数，如test接口限制第一个参数name，若该参数为某值的方法连续被调用n次（如name&#x3D;”asd”在窗口长度时间内调用超过单机阈值次数），则接下来的name&#x3D;”asd”的访问请求将无法访问。</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>   <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826102304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图9"></p>
<h3 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h3><p>  降级规则则是从 服务响应时间、接口异常次数、接口异常频率来评估接口，若响应过慢，或异常次数过多，则对接口进行降级。</p>
<p> 如：test接口被限制为1分钟内异常2次就进行服务降级，服务降级3秒。测试代码及dashboard配置如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;asdasd&quot;</span>);<span class="comment">// 服务降级前页面会看到异常抛出asdasd，服务降级后不会有该信息</span></span><br><span class="line">        <span class="comment">//return name;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200826102447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图10"></p>
<h2 id="五、Sentinel的主要功能就是容错，主要体现为下面这个三个："><a href="#五、Sentinel的主要功能就是容错，主要体现为下面这个三个：" class="headerlink" title="五、Sentinel的主要功能就是容错，主要体现为下面这个三个："></a>五、Sentinel的主要功能就是容错，主要体现为下面这个三个：</h2><h3 id="1-流量控制"><a href="#1-流量控制" class="headerlink" title="1.流量控制"></a>1.流量控制</h3><p>  流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel作为一个调配器，可以根据需要吧随机的请求调整成合适的形状。</p>
<h3 id="2-熔断降级"><a href="#2-熔断降级" class="headerlink" title="2.熔断降级"></a>2.熔断降级</h3><p>   当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源而导致级联故障。<br>   Sentinel对这个问题采取了两种手段：<br>   通过并发线程数进行限制<br>   Sentinel通过限制资源并发线程的数量，来减少不稳定资源对其他资源的影响。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接受请求。<br>   通过响应时间对资源进行降级<br>   除了对并发线程数进行控制以外，Sentinel还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>
<h3 id="Sentinel和Hystrix的区别"><a href="#Sentinel和Hystrix的区别" class="headerlink" title="Sentinel和Hystrix的区别"></a>Sentinel和Hystrix的区别</h3><p>   两者的原则是一致的，都是当一个资源出现问题时，让其快速失败，不要波及到其它服务但是在限制的手段上，确采取了完全不一样的方法：<br>   Hystrix采用的是线程池隔离的方式，优点是做到了资源之间的隔离，缺点是增加了线程切换的成本。<br>   Sentinel采用的是通过并发线程的数量和响应时间来对资源做限制。</p>
<h3 id="3-系统负载保护"><a href="#3-系统负载保护" class="headerlink" title="3.系统负载保护"></a>3.系统负载保护</h3><p>   Sentinel同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其他的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>
<p>   总之一句话：我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功能。Sentinel的功能很强大，不只是可以对接口进行限制，还可以让超出限制的请求去调用本地的‘失败专用接口’。而后续的‘失败专用接口’则是关乎用户体验的命脉，这一部分以及规则持久化我们下一章再来介绍。</p>
]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
        <category>Sentinel流量防卫兵介绍、流量控制</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos配置中心</title>
    <url>/2018/12/24/spring-cloud-alibaba-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、Nacos配置中心"><a href="#一、Nacos配置中心" class="headerlink" title="一、Nacos配置中心"></a>一、Nacos配置中心</h2><p>上文我们介绍了Nacos作为注册中心的简单实用：<a href="/2018/12/23/spring-cloud-alibaba/">SpringCloud Alibaba——Alibaba与Nacos服务注册与发现</a>，本文我们来聊一聊Nacos的另外一个功能：分布式系统的配置中心。  </p>
<p>   什么是配置中心？分布式&#x2F;微服务的架构，每个业务模块必然是多节点多主机的，那么他们之间配置文件的统一管理就显得十分有必要。配置中心即这样一个多节点系统的唯一配置中心，大家需要的配置文件都存放在我这里。 </p>
<p>  <em>并且每个人还可以存放多个版本的配置文件，按需获取，比如A节点可以有开发环境的配置文件、UAT环境配置文件、生产环境配置文件等多个版本。</em></p>
<h2 id="二、项目中配置"><a href="#二、项目中配置" class="headerlink" title="二、项目中配置"></a>二、项目中配置</h2><ol>
<li>在业务项目中（或我们之前demo mall项目中 ）增加pom.xml文件的依赖。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!--</span> <span class="string">使用Nacos</span> <span class="string">Config</span> <span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除原有 application.yml或application.properties。<br> application.properties的配置我们将挪动到配置中心，稍后配置。</li>
<li>新建并配置bootstrap.properties文件。<br> bootstrap.properties文件会先于application.properties。在这里配置的是获取nacos配置的相关信息。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos地址</span></span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br><span class="line"><span class="comment"># 配置中心对应的配置文件所属的组，稍后在Nacos中创建文件时对应。</span></span><br><span class="line">spring.cloud.nacos.config.group=mall:order </span><br><span class="line">spring.application.name=order </span><br><span class="line"><span class="comment"># 配置中心存放的对应文件命名规则为： spring.application.name-spring.profiles.active</span></span><br><span class="line">spring.profiles.active=dev </span><br><span class="line"><span class="comment"># spring.profiles.active=prod</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li>在Nacos控制台配置对应的配置文件（Nacos也支持用代码推送配置文件到配置中心，方便运维）。<br> <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825165613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图1"><br>*注意，项目中配置的name&#x2F;active&#x2F;id需要和这里的dataid、group对应起来。 *</li>
<li>运行项目，可以看到项目按照到配置中心配置的8081端口运行。并且在注册中心可以看到该项目节点。<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825165755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图2"><br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/20200825170021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTQ2OTY5,size_16,color_FFFFFF,t_70" alt="图3"></li>
</ol>
]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
        <category>Nacos配置中心</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
</search>
