{"meta":{"title":"ITCN","subtitle":"努力做有价值的技术文章","description":"这里，只求分享与免费! 这里，不隐含扭曲的价值观，而是整合并充盈正能量!","author":"Jeonke","url":"https://itcnw3c.com","root":"/"},"pages":[{"title":"关于我的","date":"2019-03-26T08:42:22.000Z","updated":"2022-08-25T03:51:33.530Z","comments":false,"path":"about/index.html","permalink":"https://itcnw3c.com/about/index.html","excerpt":"","text":"关于博主 [Jeonke] 与博主 （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"哔哩哔哩","date":"2020-08-14T05:43:42.000Z","updated":"2022-08-25T03:51:33.532Z","comments":true,"path":"bangumis/index.html","permalink":"https://itcnw3c.com/bangumis/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-03-26T08:37:57.000Z","updated":"2022-08-25T03:51:33.533Z","comments":false,"path":"categories/index.html","permalink":"https://itcnw3c.com/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-03-26T08:37:57.000Z","updated":"2022-08-25T03:51:33.535Z","comments":true,"path":"contact/index.html","permalink":"https://itcnw3c.com/contact/index.html","excerpt":"","text":"有什麽想説的？ 有什麽想問的？ 有什麽想吐槽的？ 可以在下面留言..."},{"title":"friends","date":"2019-03-26T08:43:02.000Z","updated":"2022-08-25T03:51:33.537Z","comments":true,"path":"friends/index.html","permalink":"https://itcnw3c.com/friends/index.html","excerpt":"","text":""},{"title":"ICB备案","date":"2020-08-12T04:56:27.000Z","updated":"2022-08-25T03:51:33.538Z","comments":true,"path":"icb/index.html","permalink":"https://itcnw3c.com/icb/index.html","excerpt":"","text":"申请ICB备案，请按以下格式留言备案信息，我会在第一时间处理的哈。网站名称： ITCN网站首页： itcnw3c.com网站信息：努力做有价值的技术文章网站作者： Jeonke备案编号：ICB证DSTGO008号（目前编号充足可以自定义）"},{"title":"Iconfont图标库","date":"2020-08-06T04:56:27.000Z","updated":"2022-09-02T05:54:15.622Z","comments":true,"path":"iconfont/index.html","permalink":"https://itcnw3c.com/iconfont/index.html","excerpt":"","text":"功能简介• iconfont web 在线预览工具，无需安装，打开即用。 • 可预览本地 ttf 文件中定义的所有 icon。 也支持预览 阿里iconfont 中的三种模式，unicode，Font class，Symbol。根据在线字体链接即可解析预览其定义的所有icon。图标库 body::-webkit-scrollbar { display: none} p { margin: 0; } [v-cloak] { display: none; } #app { text-align: center; padding: 10px 50px 80px; } .p-action { margin: 20px auto; max-width: 1100px; width: 100%; font-size: 35px; text-align: center; font-weight: bold; } .p-reset, .p-copy-type { padding: 8px 20px; font-size: 20px; color: white; cursor: pointer; border-radius: 4px; border: 1px solid #aaaaaa; background-color: #3D8AC7; opacity: 1; transition: 0.3s all; } .p-reset:hover, .p-copy-type:hover { opacity: 0.9; } .p-copy-type { } .p-github, .p-other { position: fixed; right: 50px; bottom: 70px; background-color: #eff3f6; background-image: linear-gradient(-180deg, #fafbfc, #eff3f6 90%); color: #24292e; border: 1px solid rgba(27, 31, 35, .2); border-radius: 3px; cursor: pointer; display: inline-block; font-size: 14px; font-weight: 600; line-height: 20px; padding: 6px 12px; } .p-help { position: fixed; right: 50px; top: 50px; width: 30px; height: 30px; color: #666666; z-index: 2; line-height: 30px; font-weight: bolder; border-radius: 50%; border: 1px solid rgba(27, 31, 35, .2); cursor: pointer; background-color: #eff3f6; background-image: linear-gradient(-180deg, #fafbfc, #eff3f6 90%); } .p-github:hover, .p-other:hover, .p-help { opacity: 0.9; } .p-other { bottom: 30px; } .p-input-container { display: flex; padding-top: 50px; } .p-input-container .line { vertical-align: top; width: 5px; height: 400px; transform-origin: top; background-repeat: repeat; background-image: url(https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/icon-dotted-y.png); } .p-input-container .url-box, .file-box { height: 300px; flex: 1; position: relative; display: flex; justify-content: center; align-items: center; flex-direction: column; } .p-input-container .url-box input { margin-bottom: 30px; display: block; width: 280px; padding: 10px; font-size: 24px; border-radius: 4px; box-shadow: none; color: #444444; border: 1px solid #cccccc; } .p-input-container .input-box, .url-box div { position: relative; display: inline-block; height: 50px; padding: 0px 30px; font-size: 25px; color: white; cursor: pointer; border-radius: 4px; border: 1px solid #aaaaaa; background-color: #3D8AC7; opacity: 1; transition: 0.3s all; } .p-input-container .input-box:hover, .url-box div:hover { opacity: 0.9; } .p-input-container .input-box input { position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; } .p-input-container .url-box div { width: 240px; } .p-icon-item { margin: 6px; color: #060606; padding: 10px 6px; display: inline-block; text-align: center; border-radius: 4px; cursor: pointer; border: 1px solid #dddddd; overflow: hidden; box-sizing: border-box; background-color: #FCFCFC; transition-duration: .4s; transition-property: background, box-shadow; } .p-icon-item:hover { background: #ffffff; border-color: transparent; box-shadow: 0 5px 18px 0 rgba(0, 0, 0, 0.3); } .p-icon-item:active { color: white; background: #7BD784; } .p-icon-item .iconfont { margin: 0 20px; padding: 6px; border-radius: 4px; font-size: 28px; } .p-icon-item .name { font-size: 12px; font-weight: bold; } .p-icon-item .value { font-size: 12px; font-weight: bold; } .p-icon-item svg { width: 36px; height: 36px; } {{tips}} 复制 {{ copyType }} 重新载入 预览 解析本地 ttf 文件 {{item.name}} {{item.value}} new Vue({ el: '#app', data() { return { url: '//at.alicdn.com/t/font_115436_oecfnfpwhk.css', tips: '请选择字体文件源', timeouter: 0, copyType: 'value', isSymbol: false, isCSS: false, iconList: [], } }, methods: { ajax(options) { options = options || {}; let xhr = new XMLHttpRequest(); if (options.type === 'buffer') { xhr.responseType = 'arraybuffer'; } xhr.onreadystatechange = function () { if (xhr.readyState === 4) { let status = xhr.status; if (status >= 200 && status < 300) { console.log(xhr) options.success && options.success(xhr.response); } else { options.fail && options.fail(status); } } }; xhr.open(\"GET\", options.url, true); xhr.send(null); }, getURLFile() { if (!this.url) { return } if (this.url.toLowerCase().indexOf('.ttf') !== -1) { this.getOnlineTTF() } else if (this.url.toLowerCase().indexOf('.css') !== -1) { this.getOnlineCSS() } else if (this.url.toLowerCase().indexOf('.js') !== -1) { this.getOnlineJS() } }, // 解析本地 ttf 文件 getLocalTTF(event) { // 解析文件内容 let file = event.target.files[0] let reader = new FileReader(); reader.readAsArrayBuffer(file); reader.onload = (evt) => { this.parseIcon(evt.target.result); } // base64 编码，动态加入 @font-face let readerBase64 = new FileReader(); readerBase64.readAsDataURL(file) readerBase64.onload = (evt) => { this.setStyle(evt.target.result) } }, // 解析在线 ttf 文件 getOnlineTTF() { // 远程获取文件 this.ajax({ url: this.url, type: 'buffer', success: (params) => { this.parseIcon(params) } }) this.setStyle(this.url) }, // 解析 CSS 文件 getOnlineCSS() { // 远程获取文件 this.isCSS = true; this.ajax({ url: this.url, success: (params) => { this.setStyle('', params) params.replace(/\\.([^:^ ]+):[\\s\\S]+?content: \"\\\\([^\"]+)\";/gi, (...item) => { this.iconList.push({ name: item[1], value: `&#${item[2]};`, }) }) } }) }, // 解析 JS 文件 getOnlineJS() { // 远程获取文件 this.isSymbol = true; this.ajax({ url: this.url, success: (params) => { let $script = document.createElement('script') $script.src = this.url document.body.append($script); console.log(params) //id=\"iconexchange\" params.replace(/id=\"([^\"]+)\"/gi, (...item) => { this.iconList.push({ name: item[1].replace(/icon/, ''), value: `#${item[1]}`, }) }) } }) }, // 解析icon parseIcon(bufferStr) { let result = window.opentype.parse(bufferStr); for (let key in result.glyphs.glyphs) { let item = result.glyphs.glyphs[key] item.unicode && this.iconList.push({ name: item.name, value: `&#${item.unicode};` }) } this.tips = '点击复制icon代码' }, // 添加style setStyle(url, cssFile) { let $style = document.createElement('style') if (cssFile) { $style.innerHTML = cssFile } else { $style.innerHTML = ` @font-face { font-family: 'iconfont'; src: url('${url}') format('truetype'); } .iconfont { font-family: \"iconfont\" !important; font-size: 24px;font-style: normal; -webkit-font-smoothing: antialiased; -webkit-text-stroke-width: 0.2px; -moz-osx-font-smoothing: grayscale; }`; } document.body.append($style); }, // 拷贝剪切板 copyToClipboard(content) { clearTimeout(this.timeouter) this.tips = `复制成功: ${content}` this.timeouter = setTimeout(() => {this.tips = `点击复制icon代码`}, 1000) if (!document.queryCommandSupported('copy')) { return false } let $input = document.createElement('input') $input.style.opacity = '0' $input.value = content document.body.appendChild($input) $input.select() const result = document.execCommand('copy') document.body.removeChild($input) $input = null return result }, // 页面重新加载 reload() { location.reload(); } } })"},{"title":"友情链接","date":"2019-03-26T08:41:02.000Z","updated":"2022-09-02T05:53:42.575Z","comments":true,"path":"link/index.html","permalink":"https://itcnw3c.com/link/index.html","excerpt":"","text":"友情链接 我的Blog资料 Blog 名字： Jeonke Blog 地址： https://itcnw3c.com/ Blog 头像： https://raw.githubusercontent.com/Jeonke/PicGoPictureBed/master/img/Sitich/Sitich06.gif Blog 简介： 努力做有价值的技术文章 如果需要交换友链,请留言 注意： 我会不定期访问你的友链，如果出现网站无法访问、404、友链入口难以发现、删除本站友链等情况我会直接将你的网站在此站上移除，如需再次添加友链，请重新申请。"},{"title":"电影","date":"2019-03-26T08:20:02.000Z","updated":"2022-08-25T03:51:33.547Z","comments":true,"path":"movies/index.html","permalink":"https://itcnw3c.com/movies/index.html","excerpt":"","text":""},{"title":"音乐","date":"2019-03-26T08:40:02.000Z","updated":"2022-08-25T03:51:33.549Z","comments":false,"path":"music/index.html","permalink":"https://itcnw3c.com/music/index.html","excerpt":"","text":"My Muice List"},{"title":"相册","date":"2019-03-26T04:40:02.000Z","updated":"2022-09-02T05:54:15.622Z","comments":false,"path":"photos/index.html","permalink":"https://itcnw3c.com/photos/index.html","excerpt":"","text":"动态图 史迪仔的一些动态图"},{"title":"标签","date":"2019-03-26T08:41:15.000Z","updated":"2022-08-25T03:51:33.554Z","comments":false,"path":"tags/index.html","permalink":"https://itcnw3c.com/tags/index.html","excerpt":"","text":""},{"title":"ICB备案信息","date":"2020-08-12T04:56:27.000Z","updated":"2022-08-25T03:51:33.542Z","comments":false,"path":"icb/itcnw3c.com/index.html","permalink":"https://itcnw3c.com/icb/itcnw3c.com/index.html","excerpt":"","text":"ICB备案网站名称ITCN网站首页itcnw3c.com网站信息努力做有价值的技术文章网站作者Jeonke备案编号ICB证DSTGO008号备案时间2020-06-21备案状态已审核 去备案"},{"title":"史迪仔的一些动态图","date":"2019-03-26T04:40:02.000Z","updated":"2022-09-02T05:54:15.645Z","comments":false,"path":"photos/wallpaper/index.html","permalink":"https://itcnw3c.com/photos/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"Sentinel流量防卫兵介绍、流量控制","slug":"spring-cloud-alibaba-2","date":"2018-12-24T03:30:00.000Z","updated":"2018-12-24T03:30:00.000Z","comments":true,"path":"2018/12/24/spring-cloud-alibaba-2/","link":"","permalink":"https://itcnw3c.com/2018/12/24/spring-cloud-alibaba-2/","excerpt":"","text":"一、Sentinel是什么？ Sentinel是分布式系统的流量防卫兵！ 什么意思呢？ 在分布式系统中，各个节点之间往往会存在调用关系。比如电商系统中，订单节点A需要调用库存节点B的减库存接口，但是在库存节点B挂掉了，或者库存节点B负载极高，短时间内无法response，就可能导致订单节点也跟着异常或停滞。 为了防止这种，节点B挂掉（或停滞）导致节点A挂掉（或停滞），又进一步导致其他节点一同发生连锁反应，Hystrix闪亮登场。 嗯……说好的Sentinel，Hystrix是个什么鬼？ 在SpringCloud的家族里面，Netflix公司开源的Hystrix才是老牌选手，具有“熔断、服务降级、近实时服务监控”的能力。Sentinel则是随着新生代（SpringCloud Alibaba）一同登场的“QPS可控、支撑近十年阿里巴巴双11”的强劲新人（对两者区别有兴趣可以看看这里）。 为了更好的理解Sentinel，我们先来看一下Sentinel最基本的功能——限流。 二、Sentinel Dashboard Sentinel可视化控制台，我们可以在上面看到已连接服务的一些监控信息。 下载Sentinel dashboard包。https://github.com/alibaba/Sentinel/releases 可见所有版本的jar包。 启动dashboard。java -Dserver.port&#x3D;8080 -Dcsp.sentinel.dashboard.server&#x3D;localhost:8080 -Dproject.name&#x3D;sentinel-dashboard -jar sentinel-dashboard-1.7.1.jar 访问localhost:8080，用户名密码全部默认sentinel。 进入dashboard，可以看到这里有某个服务的QPS数据（图中是Sentinel Dashboard自身的服务接口），左侧菜单栏里面可以配置流量控制规则、服务降级规则、热点数据规则。 三、Sentinel 接入端 dashboard是一个便捷的页面管理工具，真正的Sentinel功能还是依赖在业务项目之中，我们继续在之前的Demo基础上进行扩充。 添加依赖。1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;&lt;/dependency&gt; 添加配置。（上一章我们介绍了可以在Nacos配置中心添加yml或properties配置，但是这里为了代码完整保存，仍然写在了bootstrap.properties中）。12spring.cloud.sentinel.transport.port=8121spring.cloud.sentinel.transport.dashboard=localhost:8080 添加接口并配置Sentinel资源名称：test。12345678910111213import com.alibaba.csp.sentinel.annotation.SentinelResource;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class TestController &#123; @SentinelResource(&quot;test&quot;) @GetMapping(value = &quot;/test&quot;) public String test()&#123; return &quot;test&quot;; &#125;&#125; 启动application，页面访问测试接口（注意：必须先访问过该接口，才能在dashboard上看到该接口的信息）。 查看dashboard，可以看到order项目已经被sentinel dashboard监控到了。我们可以直接在页面上配置流量限制（注意：页面配置不是持久化的，之后章节我们会介绍sentinel规则持久化的方法）。 6. 测试 流量限制，设置test接口的QPS 单机阈值为1. 7. 测试 流量限制，连续访问test接口两次，发现第二次接口不可达，测试成功。 四、热点规则&#x2F;服务降级规则 除了流量控制，sentinel还支持热点流量控制、服务降级规则配置等 热点规则 热点规则是对接口规则的更细化的控制，可以通过对参数进行流量控制，比如将test方法改造为带参数的方法（如下代码），然后配置热点规则的参数索引、单机阈值、统计窗口长度（如下图），则可以按照参数限制。 限制规则：按照索引下标选择限制的参数，如test接口限制第一个参数name，若该参数为某值的方法连续被调用n次（如name&#x3D;”asd”在窗口长度时间内调用超过单机阈值次数），则接下来的name&#x3D;”asd”的访问请求将无法访问。 12345@SentinelResource(&quot;test&quot;) @GetMapping(value = &quot;/test&quot;) public String test(@RequestParam String name)&#123; return name; &#125; 降级规则 降级规则则是从 服务响应时间、接口异常次数、接口异常频率来评估接口，若响应过慢，或异常次数过多，则对接口进行降级。 如：test接口被限制为1分钟内异常2次就进行服务降级，服务降级3秒。测试代码及dashboard配置如下。 12345@SentinelResource(&quot;test&quot;) @GetMapping(value = &quot;/test&quot;) public String test(@RequestParam String name)&#123; throw new RuntimeException(&quot;asdasd&quot;);// 服务降级前页面会看到异常抛出asdasd，服务降级后不会有该信息 //return name; 五、Sentinel的主要功能就是容错，主要体现为下面这个三个：1.流量控制 流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel作为一个调配器，可以根据需要吧随机的请求调整成合适的形状。 2.熔断降级 当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源而导致级联故障。 Sentinel对这个问题采取了两种手段： 通过并发线程数进行限制 Sentinel通过限制资源并发线程的数量，来减少不稳定资源对其他资源的影响。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接受请求。 通过响应时间对资源进行降级 除了对并发线程数进行控制以外，Sentinel还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。 Sentinel和Hystrix的区别 两者的原则是一致的，都是当一个资源出现问题时，让其快速失败，不要波及到其它服务但是在限制的手段上，确采取了完全不一样的方法： Hystrix采用的是线程池隔离的方式，优点是做到了资源之间的隔离，缺点是增加了线程切换的成本。 Sentinel采用的是通过并发线程的数量和响应时间来对资源做限制。 3.系统负载保护 Sentinel同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其他的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。 总之一句话：我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功能。Sentinel的功能很强大，不只是可以对接口进行限制，还可以让超出限制的请求去调用本地的‘失败专用接口’。而后续的‘失败专用接口’则是关乎用户体验的命脉，这一部分以及规则持久化我们下一章再来介绍。","categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/"},{"name":"Sentinel流量防卫兵介绍、流量控制","slug":"SpringCloud-Alibaba/Sentinel流量防卫兵介绍、流量控制","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/Sentinel%E6%B5%81%E9%87%8F%E9%98%B2%E5%8D%AB%E5%85%B5%E4%BB%8B%E7%BB%8D%E3%80%81%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/tags/SpringCloud-Alibaba/"}],"author":"Jeonke"},{"title":"Nacos配置中心","slug":"spring-cloud-alibaba-1","date":"2018-12-24T00:01:00.000Z","updated":"2018-12-24T00:01:00.000Z","comments":true,"path":"2018/12/24/spring-cloud-alibaba-1/","link":"","permalink":"https://itcnw3c.com/2018/12/24/spring-cloud-alibaba-1/","excerpt":"","text":"一、Nacos配置中心上文我们介绍了Nacos作为注册中心的简单实用：SpringCloud Alibaba——Alibaba与Nacos服务注册与发现，本文我们来聊一聊Nacos的另外一个功能：分布式系统的配置中心。 什么是配置中心？分布式&#x2F;微服务的架构，每个业务模块必然是多节点多主机的，那么他们之间配置文件的统一管理就显得十分有必要。配置中心即这样一个多节点系统的唯一配置中心，大家需要的配置文件都存放在我这里。 并且每个人还可以存放多个版本的配置文件，按需获取，比如A节点可以有开发环境的配置文件、UAT环境配置文件、生产环境配置文件等多个版本。 二、项目中配置 在业务项目中（或我们之前demo mall项目中 ）增加pom.xml文件的依赖。 12345&lt;!-- 使用Nacos Config --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt; 删除原有 application.yml或application.properties。 application.properties的配置我们将挪动到配置中心，稍后配置。 新建并配置bootstrap.properties文件。 bootstrap.properties文件会先于application.properties。在这里配置的是获取nacos配置的相关信息。 12345678# nacos地址spring.cloud.nacos.config.server-addr=127.0.0.1:8848# 配置中心对应的配置文件所属的组，稍后在Nacos中创建文件时对应。spring.cloud.nacos.config.group=mall:order spring.application.name=order # 配置中心存放的对应文件命名规则为： spring.application.name-spring.profiles.activespring.profiles.active=dev # spring.profiles.active=prod 在Nacos控制台配置对应的配置文件（Nacos也支持用代码推送配置文件到配置中心，方便运维）。 *注意，项目中配置的name&#x2F;active&#x2F;id需要和这里的dataid、group对应起来。 * 运行项目，可以看到项目按照到配置中心配置的8081端口运行。并且在注册中心可以看到该项目节点。","categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/"},{"name":"Nacos配置中心","slug":"SpringCloud-Alibaba/Nacos配置中心","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/tags/SpringCloud-Alibaba/"}],"author":"Jeonke"},{"title":"Alibaba与Nacos服务注册与发现","slug":"spring-cloud-alibaba","date":"2018-12-23T04:02:00.000Z","updated":"2018-12-23T04:02:32.000Z","comments":true,"path":"2018/12/23/spring-cloud-alibaba/","link":"","permalink":"https://itcnw3c.com/2018/12/23/spring-cloud-alibaba/","excerpt":"","text":"SpringCloud Alibaba什么是SpringCloud Alibaba？ 简言之，SpringCloud Alibaba是对SpringCloud全生态的一个封装简化，其中还引入了一些阿里自研或其他的开源组件。 Alibaba让我们更好的使用电商。 Nacos是什么Nacos官网原文： Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。 用过springCloud的朋友知道，Nacos对标Erueka。 没用过的朋友可以这样理解，Nacos是一个路由表，我们的各个微服务Web之间相互寻找需要通过这个路由表。 比如业务A有两个节点A1和A2，业务B有个节点B1想要调用A的某个接口。我们不需要在业务B中写一堆A的url来调用api，只要告诉 Nacos我们要找业务A，它就会告诉我们业务A有哪些节点 如何使用Nacos服务端nacos服务端支持很多种部署方式，详情见：https://nacos.io/zh-cn/docs/quick-start.html 笔者比较喜欢docker-compose，使用docker部署步骤如下： 1. 拉取nacos 源码。 git clone https://github.com/nacos-group/nacos-docker.git cd nacos-docker 2. nacos-docker自带的examples/standalone-mysql-5.7.yaml文件默认会启动一个自带的mysql并连接。 如果要使用自己的mysql，我们就需要修改yaml文件及一个mysql配置文件，并且自己将nacos所需的数据库导入到我们使用的mysql中 （这一点实在是太不友好了,希望未来会得到改进）。这里不想再开启一个mysql容器的同学可以和笔者一样，选择derby方式启动（需 要先安装docker及docker-compose）。 docker-compose -f example/standalone-derby.yaml up -d 3. 页面访问 --&gt; http://ip:8848/nacos/ 项目端集成Nacos-服务提供方1. nacos-provider pom.xml文件如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.lele&lt;/groupId&gt; &lt;artifactId&gt;mall&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;mall&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;!-- spring cloud alibaba，必须有，版本自选 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- alibaba 必须有，版本自选--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2. application.properties文件如下： 1234server.port=8081spring.application.name=orderspring.cloud.nacos.discovery.server-addr=之前的nacos服务端ip:8848management.endpoints.web.exposure.include=* 3. application如下： 12345678910@SpringBootApplication@EnableDiscoveryClient //必须有， public class MallApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(MallApplication.class, args); &#125;&#125; 4、正常启动后，我们会看到服务列表多出了我们的application。 项目端继承Nacos-消费者方在上面我们启用了order模块，order模块提供了一些对外的api接口供其他服务调用，我们可以创建一个user项目来调用这个api （通过Nacos 来调用）。 1. 首先，我们现在order模块补上一个服务方法。 1234567@RestController public class Hello &#123; @GetMapping(value = &quot;/hello/&#123;string&#125;&quot;) public String hello(@PathVariable String string) &#123; return &quot;Hello! 我是Order，感谢你(&quot; + string+&quot;)来调用我的hello方法&quot;; &#125; &#125; 2. 然后，新建一个product，pom与application.properties与上面一样不再赘述，这个项目我们给起名user。 3. 最后，我们在product中加入访问order模块API接口的方法。 1234567891011121314151617181920212223242526272829303132333435@SpringBootApplication@EnableDiscoveryClientpublic class ProductApplication &#123; @LoadBalanced @Bean public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(ProductApplication.class, args); &#125; @RestController public class NacosController&#123; @Autowired private LoadBalancerClient loadBalancerClient; @Autowired private RestTemplate restTemplate; @Value(&quot;$&#123;spring.application.name&#125;&quot;) private String appName; @GetMapping(&quot;/hi&quot;) public String hi()&#123; ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;order&quot;); // 负载均衡获取我们实际要访问的项目地址 String path = String.format(&quot;http://%s:%s/hello/%s&quot;,serviceInstance.getServiceId(),serviceInstance.getPort(),appName); System.out.println(&quot;request path:&quot; +path); return restTemplate.getForObject(path,String.class); &#125; &#125;&#125; 4. 访问product的接口，可以看到成功返回了orderAPI的信息,服务路由成功。 http://localhost:8082/hi","categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/"},{"name":"Alibaba与Nacos服务注册与发现","slug":"SpringCloud-Alibaba/Alibaba与Nacos服务注册与发现","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/Alibaba%E4%B8%8ENacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/tags/SpringCloud-Alibaba/"}],"author":"Jeonke"},{"title":"实用的vue插件大汇总","slug":"vue-clie","date":"2018-03-28T04:55:42.000Z","updated":"2018-03-28T04:55:42.000Z","comments":true,"path":"2018/03/28/vue-clie/","link":"","permalink":"https://itcnw3c.com/2018/03/28/vue-clie/","excerpt":"","text":"Vue是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件特别整理了常用的vue插件，来了个大汇总，方便查找使用，便于工作和学习。很全的vue插件汇总，赶紧收藏下吧！ 一、UI组件及框架element - 饿了么出品的Vue2的web UI工具套件 mint-ui - Vue2的移动UI元素 iview - 基于 Vuejs 的开源 UI 组件库 vux-ui -Vue.js 移动端 UI 组件库 Keen-UI - 轻量级的基本UI组件合集 vue-material - 通过Vue Material和Vue 2建立精美的app应用 muse-ui - 三端样式一致的响应式 UI 库 vuetify - 为移动而生的Vue JS 2组件框架 vonic - 快速构建移动端单页应用 vue-blu - 帮助你轻松创建web应用 vue-multiselect - Vue.js选择框解决方案 VueCircleMenu - 漂亮的vue圆环菜单 vue-chat - vuejs和vuex及webpack的聊天示例 radon-ui - 快速开发产品的Vue组件库 vue-waterfall - Vue.js的瀑布布局组件 vue-carbon - 基于 vue 开发MD风格的移动端 vue-beauty - 由vue和ant design创建的优美UI组件 bootstrap-vue - 应用于Vuejs2的Twitter的Bootstrap 4组件 vueAdmin - 基于vuejs2和element的简单的管理员模板 vue-ztree - 用 vue 写的树层级组件vue-tree - vue树视图组件 vue-tabs - 多tab页轻型框架 二、滚动scroll组件vue-scroller - Vonic UI的功能性组件 vue-mugen-scroll - 无限滚动组件 vue-infinite-loading - VueJS的无限滚动插件 vue-virtual-scroller - 带任意数目数据的顺畅的滚动 vue-infinite-scroll - VueJS的无限滚动指令 vue-scrollbar - 最简单的滚动区域组件 vue-scroll - vue滚动vue-pull-to-refresh - Vue2的上拉下拉 mint-loadmore - VueJS的双向下拉刷新组件 vue-smoothscroll - smoothscroll的VueJS版本 三、slider组件vue-awesome-swiper - vue.js触摸滑动组件，js插件swiper的vue版本 vue-slick - 实现流畅轮播框的vue组件 vue-swipe - VueJS触摸滑块 vue-swiper - 易于使用的滑块组件 vue-images - 显示一组图片的lightbox组件 vue-carousel-3d - VueJS的3D轮播组件 vue-slide - vue轻量级滑动组件 vue-slider - vue 滑动组件 vue-m-carousel - vue 移动端轮播组件 dd-vue-component - 订单来了的公共组件库 vue-easy-slider - Vue 2.x的滑块组件 四、编辑器markcook - 好看的markdown编辑器 eme - 优雅的Markdown编辑器 vue-syntax-highlight - Sublime Text语法高亮 vue-quill-editor - 基于Quill适用于Vue2的富文本编辑器 Vueditor - 所见即所得的编辑器 vue-html5-editor - html5所见即所得编辑器 vue2-editor - HTML编辑器 vue-simplemde - VueJS的Markdown编辑器组件 vue-quill - vue组件构建quill编辑器 五、图表vue-table - 简化数据表格 vue-chartjs - vue中的Chartjs的封装 vue-charts - 轻松渲染一个图表 vue-chart - 强大的高速的vue图表解析 vue-highcharts - HighCharts组件 chartjs - Vue Bulma的chartjs组件 vue-chartkick - VueJS一行代码实现优美图表 六、日历vue-calendar - 日期选择插件 vue-datepicker - 日历和日期选择组件 vue-datetime-picker - 日期时间选择控件 vue2-calendar - 支持lunar和日期事件的日期选择器 vue-fullcalendar - 基于vue.js的全日历组件 vue-datepicker - 漂亮的Vue日期选择器组件 datepicker - 基于flatpickr的时间选择组件 vue2-timepicker - 下拉时间选择器 vue-date-picker - VueJS日期选择器组件 vue-datepicker-simple - 基于vue的日期选择器 七、地址选择vue-city - 城市选择器 vue-region-picker - 选择中国的省份市和地区 八、地图vue-amap - 基于Vue 2和高德地图的地图组件 vue-google-maps - 带有双向数据绑定Google地图组件 vue-baidu-map- 基于 Vue 2的百度地图组件库 vue-cmap - Vue China map可视化组件 九、播放器vue-video-player - VueJS视频及直播播放器 vue-video - Vue.js的HTML5视频播放器 vue-music-master - vue手机端网页音乐播放器 十、文件上传vue-upload-component - Vuejs文件上传组件 vue-core-image-upload - 轻量级的vue上传插件 vue-dropzone - 用于文件上传的Vue组件 十一、图片处理vue-lazyload-img - 移动优化的vue图片懒加载插件 vue-image-crop-upload - vue图片剪裁上传组件 vue-svgicon - 创建svg图标组件的工具 vue-img-loader - 图片加载UI组件 vue-image-clip- 基于vue的图像剪辑组件 vue-progressive-image - Vue的渐进图像加载插件 十二、提示vue-toast-mobile - VueJS的toast插件 vue-msgbox - vuejs的消息框 vue-tooltip - 带绑定信息提示的提示工具 vue-verify-pop - 带气泡提示的vue校验插件 十三、进度条vue-radial-progress - Vue.js放射性进度条组件 vue-progressbar - vue轻量级进度条 vue2-loading-bar - 最简单的仿Youtube加载条视图 十四、分页vuejs-paginate 一个简单的分页的组件 vue-paginate 一个复杂的分页的组件 十五、开发框架汇总vue-admin - Vue管理面板框架 electron-vue - Electron及VueJS快速启动样板 vue-2.0-boilerplate - Vue2单页应用样板 vue-webgulp - 仿VueJS Vue loader示例 vue-bulma - 轻量级高性能MVVM Admin UI框架 vue-spa-template - 前后端分离后的单页应用开发 Framework7-Vue - VueJS与Framework7结合 vue-element-starter - vue启动页 十六、实用库汇总vuelidate - 简单轻量级的基于模块的Vue.js验证 qingcheng - qingcheng主题 vuex - 专为 Vue.js 应用程序开发的状态管理模式 vue-axios - 将axios整合到VueJS的封装 vue-desktop - 创建管理面板网站的UI库 vue-meta - 管理app的meta信息 avoriaz - VueJS测试实用工具库 vue-framework7 - 结合VueJS使用的Framework7组件 vue-lazy-render - 用于Vue组件的延迟渲染 vue-svg-icon - vue2的可变彩色svg图标方案 vue-online - reactive的在线和离线组件 vue-password-strength-meter - 交互式密码强度计 vuep - 用实时编辑和预览来渲染Vue组件 vue-bootstrap-modal - vue的Bootstrap样式组件 element-admin - 支持 vuecli 的 Element UI 的后台模板 vue-shortkey - 应用于Vue.js的Vue-ShortKey 插件 cleave - 基于cleave.js的Cleave组件 vue-events - 简化事件的VueJS插件 http-vue-loader - 从html及js环境加载vue文件 vue-electron - 将选择的API封装到Vue对象中的插件 vue-router-transition - 页面过渡插件vuemit - 处理VueJS事件 vue-cordova - Cordova的VueJS插件 vue-qart - 用于qartjs的Vue2指令 vue-websocket - VueJS的Websocket插件 vue-gesture - VueJS的手势事件插件 vue-local-storage - 具有类型支持的Vuejs本地储存插件 lazy-vue - 懒加载图片 vue-lazyloadImg - 图片懒加载插件 vue-bus - VueJS的事件总线 vue-observe-visibility - 当元素在页面上可见或隐藏时检测 vue-notifications - 非阻塞通知库 v-media-query - vue中添加用于配合媒体查询的方法 vuex-shared-mutations - 分享某种Vuex mutations vue-lazy-component - 懒加载组件或者元素的Vue指令 vue-reactive-storage - vue插件的Reactive层 vue-ts-loader - 在Vue装载机检查脚本 vue-pagination-2 - 简单通用的分页组件 vuex-i18n - 定位插件Vue.resize - 检测HTML调整大小事件的vue指令 vue-zoombox - 一个高级zoombox leo-vue-validator - 异步的表单验证组件 modal - Vue Bulma的modal组件Famous-Vue - Famous库的vue组件 vue-input-autosize - 基于内容自动调整文本输入的大小 vue-file-base64 - 将文件转换为Base64的vue组件 Vue-Easy-Validator - 简单的表单验证 vue-truncate-filter - 截断字符串的VueJS过滤器 服务端 vue-ssr - 结合Express使用Vue2服务端渲染 nuxt.js - 用于服务器渲染Vue app的最小化框架 vue-ssr - 非常简单的VueJS服务器端渲染模板 vue-easy-renderer -Nodejs服务端渲染 express-vue -简单的使用服务器端渲染vue.js 十七、辅助工具DejaVue - Vuejs可视化及压力测试 vue-generate-component - 轻松生成Vue js组件的CLI工具 vscode-VueHelper - 目前vscode最好的vue代码提示插件 vue-play - 展示Vue组件的最小化框架 VuejsStarterKit - vuejs starter套件 vue-multipage-cli - 简单的多页CLI 十八、应用实例pagekit - 轻量级的CMS建站系统 vuedo - 博客平台 koel - 基于网络的个人音频流媒体服务 CMS-of-Blog - 博客内容管理器 vue-cnode - 重写vue版cnode社区 vue-ghpages-blog - 依赖GitHub Pages无需本地生成的静态博客 swoole-vue-webim - Web版的聊天应用 fewords - 功能极其简单的笔记本 jackblog-vue - 个人博客系统 vue-blog - 使用Vue2.0 和Vuex的vue-blog vue-dashing-js - nuvo-dashing-js的fork rss-reader - 简单的rss阅读器 十九、Demo示例 Vue-cnodejs - 基于vue重写 Cnodejs.org的webapp NeteaseCloudWebApp - 高仿网易云音乐的webapp vue-zhihu-daily - 知乎日报 with Vuejs vue-wechat - vue.js开发微信app界面 vue2-demo - 从零构建vue2 + vue-router + vuex 开发环境 eleme - 高仿饿了么app商家详情 vue-demo - vue简易留言板 maizuo - vue&#x2F;vuex&#x2F;redux仿卖座网 spa-starter-kit - 单页应用启动套件 vue-music - Vue 音乐搜索播放 douban - 模仿豆瓣前端 vue-Meizi - vue最新实战项目 zhihudaily-vue - 知乎日报web版 vue-demo-kugou - vuejs仿写酷狗音乐webapp VueDemo_Sell_Eleme - Vue2高仿饿了么外卖平台 vue2.0-taopiaopiao - vue2.0与express构建淘票票页面 vue-leancloud-blog - 一个前后端完全分离的单页应用 node-vue-server-webpack - Node.js+Vue.js+webpack快速开发框架 mi-by-vue - VueJS仿小米官网 vue-fis3 - 流行开源工具集成demo vue2.x-douban - Vue2实现简易豆瓣电影webApp vue-demo-maizuo - 使用Vue2全家桶仿制卖座电影 vue-zhihudaily - 知乎日报 Web 版本 vue-adminLte-vue-router - vue和adminLte整合应用 vue-axios-github - 登录拦截登出功能 Zhihu-Daily-Vue.js - Vuejs单页网页应用 hello-vue-django - 使用带有Django的vuejs的样板项目 vue-cnode - vue单页应用demo x-blog - 开源的个人blog项目 vue-express-mongodb - 简单的前后端分离案例 websocket_chat - 基于vue和websocket的多人在线聊天室 photoShare - 基于图片分享的社交平台 vue-zhihudaily-2.0 - 使用Vue2.0+vue-router+vuex创建的zhihudaily notepad - 本地存储的记事本 vueBlog - 前后端分离博客 vue-ruby-china - VueJS框架搭建的rubychina平台 Zhihu_Daily - 基于Vue和Nodejs的Web单页应用 vue-koa-demo - 使用Vue2和Koa1的全栈demo vue2.x-Cnode - 基于vue全家桶的Cnode社区 life-app-vue - 使用vue2完成多功能集合到小webapp github-explorer - 寻找最有趣的GitHub库 vue-trip - vue2做的出行webapp vue-ssr-boilerplate - 精简版的ofvue-hackernews-2 vue-bushishiren - 不是诗人应用 houtai - 基于vue和Element的后台管理系统 ios7-vue - 使用vue2.0 vue-router vuex模拟ios7 Framework7-VueJS - 使用移动框架的示例 cnode-vue - 基于vue和vue-router构建的cnodejs web网站SPA vue-cli-multipage-bootstrap - 将vue官方在线示例整合到组件中 vue-cnode - 用 Vue 做的 CNode 官网 HyaReader - 移动友好的阅读器 zhihu-daily - 轻松查看知乎日报内容 seeMusic - 跨平台云音乐播放器 vue-cnode - 使用cNode社区提供的接口 zhihu-daily-vue - 知乎日报 sls-vuex2-demo - vuex2商城购物车demo vue-dropload - 用以测试下拉加载与简单路由 vue-cnode-mobile - 搭建cnode社区 Vuejs-SalePlatform - vuejs搭建的售卖平台demo v-notes - 简单美观的记事本 vue-starter - VueJs项目的简单启动页 vue-memo - 用 vue写的记事本应用","categories":[{"name":"Vue","slug":"Vue","permalink":"https://itcnw3c.com/categories/Vue/"},{"name":"实用的Vue插件大汇总","slug":"Vue/实用的Vue插件大汇总","permalink":"https://itcnw3c.com/categories/Vue/%E5%AE%9E%E7%94%A8%E7%9A%84Vue%E6%8F%92%E4%BB%B6%E5%A4%A7%E6%B1%87%E6%80%BB/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://itcnw3c.com/tags/Vue/"}],"author":"Jeonke"},{"title":"Vue项目脚手架","slug":"vue-doc","date":"2018-03-27T10:05:16.000Z","updated":"2018-03-27T10:05:16.000Z","comments":true,"path":"2018/03/27/vue-doc/","link":"","permalink":"https://itcnw3c.com/2018/03/27/vue-doc/","excerpt":"","text":"vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：*https://github.com/vuejs/vue-cli 一、安装 node.js首先需要安装node环境，可以直接到中文官网* http://nodejs.cn/下载安装包。 只是这样安装的 node 是固定版本的，如果需要多版本的 node，可以使用 nvm 安装* http://blog.csdn.net/s8460049/article/details/52396399 安装完成后，可以命令行工具中输入 node -v 和 npm -v，如果能显示出版本号，就说明安装成功。 二、安装 vue-cli安装好了 node，我们可以直接全局安装 vue-cli： npm install -g vue- cli 但是这种安装方式比较慢，推荐使用国内镜像来安装，所以我们先设置 cnpm： npm install -g cnpm –registry&#x3D; https://registry.npm.taobao.org 如果安装失败，可以使用 npm cache clean 清理缓存，然后再重新安装。后面的安装过程中，如有安装失败的情况，也需要先清理缓存 同样可以使用 cnpm -v 查看是否安装成功 然后使用 cnpm 安装 vue-cli 和 webpack cnpm install -g vue- cli 最新的 vue 项目模板中，都带有 webpack 插件，所以这里可以不安装 webpack 安装完成后，可以使用 vue -V （注意 V 大写）查看是否安装成功。 如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，可以使用 npm install -g npm 来更新版本 三、生成项目首先需要在命令行中进入到项目目录，然后输入： vue init webpack Vue-Project 其中 webpack 是模板名称，可以到 vue.js 的 GitHub 上查看更多的模板* https://github.com/vuejs-templates Vue-Project 是自定义的项目名称，命令执行之后，会在当前目录生成一个以该名称命名的项目文件夹 配置完成后，可以看到目录下多出了一个项目文件夹，里面就是 vue-cli 创建的一个基于 webpack 的 vue.js 项目 然后进入项目目录（cd Vue-Project），使用 cnpm 安装依赖 cnpm install 然后启动项目 npm run dev 如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，需要修改一下配置文件 config&gt;index.js 建议将端口号改为不常用的端口。另外我还将 build 的路径前缀修改为 ‘ .&#x2F; ‘（原本为 ‘ &#x2F; ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ &#x2F; ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。 四、打包上线自己的项目文件都需要放到 src 文件夹下 项目开发完成之后，可以输入 npm run build 来进行打包工作 npm run build 打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看 项目上线时，只需要将 dist 文件夹放到服务器就行了。","categories":[{"name":"Vue","slug":"Vue","permalink":"https://itcnw3c.com/categories/Vue/"},{"name":"Vue脚手架","slug":"Vue/Vue脚手架","permalink":"https://itcnw3c.com/categories/Vue/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://itcnw3c.com/tags/Vue/"}],"author":"Jeonke"},{"title":"Hello World","slug":"hello-world","date":"2018-03-22T07:26:32.000Z","updated":"2018-03-22T07:26:32.000Z","comments":true,"path":"2018/03/22/hello-world/","link":"","permalink":"https://itcnw3c.com/2018/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://itcnw3c.com/categories/Hexo/"},{"name":"Hello World","slug":"Hexo/Hello-World","permalink":"https://itcnw3c.com/categories/Hexo/Hello-World/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://itcnw3c.com/tags/Hexo/"}],"author":"Jeonke"}],"categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/"},{"name":"Sentinel流量防卫兵介绍、流量控制","slug":"SpringCloud-Alibaba/Sentinel流量防卫兵介绍、流量控制","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/Sentinel%E6%B5%81%E9%87%8F%E9%98%B2%E5%8D%AB%E5%85%B5%E4%BB%8B%E7%BB%8D%E3%80%81%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"},{"name":"Nacos配置中心","slug":"SpringCloud-Alibaba/Nacos配置中心","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"},{"name":"Alibaba与Nacos服务注册与发现","slug":"SpringCloud-Alibaba/Alibaba与Nacos服务注册与发现","permalink":"https://itcnw3c.com/categories/SpringCloud-Alibaba/Alibaba%E4%B8%8ENacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Vue","slug":"Vue","permalink":"https://itcnw3c.com/categories/Vue/"},{"name":"实用的Vue插件大汇总","slug":"Vue/实用的Vue插件大汇总","permalink":"https://itcnw3c.com/categories/Vue/%E5%AE%9E%E7%94%A8%E7%9A%84Vue%E6%8F%92%E4%BB%B6%E5%A4%A7%E6%B1%87%E6%80%BB/"},{"name":"Vue脚手架","slug":"Vue/Vue脚手架","permalink":"https://itcnw3c.com/categories/Vue/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"},{"name":"Hexo","slug":"Hexo","permalink":"https://itcnw3c.com/categories/Hexo/"},{"name":"Hello World","slug":"Hexo/Hello-World","permalink":"https://itcnw3c.com/categories/Hexo/Hello-World/"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","permalink":"https://itcnw3c.com/tags/SpringCloud-Alibaba/"},{"name":"Vue","slug":"Vue","permalink":"https://itcnw3c.com/tags/Vue/"},{"name":"Hexo","slug":"Hexo","permalink":"https://itcnw3c.com/tags/Hexo/"}]}